<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java学习：微型可运行程序：猜数字小程序</title>
    <url>/2021/04/02/Java%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%BE%AE%E5%9E%8B%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%EF%BC%9A%E7%8C%9C%E6%95%B0%E5%AD%97%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="猜数字小程序"><a href="#猜数字小程序" class="headerlink" title="猜数字小程序"></a>猜数字小程序</h1><p>既然是Java程序就要用到swing组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br></pre></td></tr></table></figure>
<p>然后创建小程序类，继承swing中的Jframe类以便实现窗口功能，同时继承ActionListener接口来监听用户行为，以便实时交互</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowButton</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span></span><br></pre></td></tr></table></figure>
<p>利用继承的组件构造几个按钮，标签和可输入文本框</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JTextField txt;</span><br><span class="line">JButton buttonNumber,buttonEnter,buttonD1,buttonD2,buttonD3,buttonD4,buttonD5;</span><br><span class="line">JLabel label;</span><br></pre></td></tr></table></figure>
<p>下面是程序类`</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowButton</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> number;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> c=<span class="number">5</span>;</span><br><span class="line">JTextField txt;</span><br><span class="line">JButton buttonNumber,buttonEnter,buttonD1,buttonD2,buttonD3,buttonD4,buttonD5;</span><br><span class="line">JLabel label;</span><br><span class="line">JPasswordField password;</span><br><span class="line">WindowButton (String s)&#123;</span><br><span class="line"><span class="keyword">super</span>(s);</span><br><span class="line">addWindowListener(<span class="keyword">new</span> WindowAdapter()</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span></span>&#123;dispose();&#125;</span><br><span class="line">&#125;);</span><br><span class="line">setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">buttonNumber=<span class="keyword">new</span> JButton(<span class="string">&quot;点我，我就想出一个数&quot;</span>);</span><br><span class="line">add(buttonNumber);</span><br><span class="line">label=<span class="keyword">new</span> JLabel(<span class="string">&quot;输入你的猜测&quot;</span>,JLabel.CENTER);</span><br><span class="line">label.setBackground(Color.cyan);</span><br><span class="line">txt=<span class="keyword">new</span> JTextField(<span class="string">&quot;0&quot;</span>,<span class="number">10</span>);</span><br><span class="line">add(label);</span><br><span class="line">add(txt);</span><br><span class="line">buttonEnter=<span class="keyword">new</span> JButton(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line">add(buttonEnter);</span><br><span class="line">buttonD1=<span class="keyword">new</span> JButton(<span class="string">&quot;点我进入简单难度&quot;</span>);</span><br><span class="line">add(buttonD1);</span><br><span class="line">buttonD2=<span class="keyword">new</span> JButton(<span class="string">&quot;点我进入普通难度&quot;</span>);</span><br><span class="line">add(buttonD2);</span><br><span class="line">buttonD3=<span class="keyword">new</span> JButton(<span class="string">&quot;点我进入困难难度&quot;</span>);</span><br><span class="line">add(buttonD3);</span><br><span class="line">buttonD4=<span class="keyword">new</span> JButton(<span class="string">&quot;点我进入噩梦难度&quot;</span>);</span><br><span class="line">add(buttonD4);</span><br><span class="line">buttonD5=<span class="keyword">new</span> JButton(<span class="string">&quot;点我进入地狱难度&quot;</span>);</span><br><span class="line">add(buttonD5);</span><br><span class="line">buttonEnter.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">buttonNumber.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">buttonD1.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">buttonD2.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">buttonD3.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">buttonD4.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">buttonD5.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">setBounds(<span class="number">100</span>,<span class="number">400</span>,<span class="number">1300</span>,<span class="number">100</span>);</span><br><span class="line">setVisible(<span class="keyword">true</span>);</span><br><span class="line">validate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e.getSource()==buttonD1)&#123;num=<span class="number">10</span>;c=<span class="number">5</span>;label.setText(<span class="string">&quot;现在是简单难度，请点前面的按钮&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getSource()==buttonD2)&#123;num=<span class="number">100</span>;c=<span class="number">8</span>;label.setText(<span class="string">&quot;现在是普通难度，请点前面的按钮&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getSource()==buttonD3)&#123;num=<span class="number">1000</span>;c=<span class="number">10</span>;label.setText(<span class="string">&quot;现在是困难难度，请点前面的按钮&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getSource()==buttonD4)&#123;num=<span class="number">10000000</span>;c=<span class="number">20</span>;label.setText(<span class="string">&quot;现在是噩梦难度，请点前面的按钮&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getSource()==buttonD5)&#123;num=<span class="number">1000000000</span>;c=<span class="number">30</span>;label.setText(<span class="string">&quot;现在是地狱难度，你不可能成功的，呼哈哈！别忘了前面的按钮，不过算了，反正你也过不了&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getSource()==buttonNumber)&#123;</span><br><span class="line"> number=(<span class="keyword">int</span>)(Math.random()*num)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">10</span>)</span><br><span class="line">&#123;label.setText(<span class="string">&quot;现在是简单难度，输入你的猜测：&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">100</span>)</span><br><span class="line">&#123;label.setText(<span class="string">&quot;现在是普通难度，输入你的猜测：&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">1000</span>)</span><br><span class="line">&#123;label.setText(<span class="string">&quot;现在是困难难度，输入你的猜测：&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">10000000</span>)</span><br><span class="line">&#123;label.setText(<span class="string">&quot;现在是噩梦难度，猜中了奖励十块钱：&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">1000000000</span>)</span><br><span class="line">&#123;label.setText(<span class="string">&quot;这一关不可能成功，猜中了奖励一百块钱：&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getSource()==buttonEnter)&#123;</span><br><span class="line"><span class="keyword">int</span> guess=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">guess=Integer.parseInt(txt.getText());</span><br><span class="line"><span class="keyword">if</span>(guess==number)&#123;</span><br><span class="line">label.setText(<span class="string">&quot;恭喜你答对啦,超棒！！&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(guess&gt;number&amp;&amp;c&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">label.setText(<span class="string">&quot;有点大了，加油吧，你还有&quot;</span>+(c--)+<span class="string">&quot;次机会哦&quot;</span>);txt.setText(<span class="keyword">null</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(guess&lt;number&amp;&amp;c&gt;<span class="number">0</span>)&#123;</span><br><span class="line">label.setText(<span class="string">&quot;猜小了，继续吧，你还有&quot;</span>+(c--)+<span class="string">&quot;次机会&quot;</span>);txt.setText(<span class="keyword">null</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">label.setText(<span class="string">&quot;很遗憾，你输了&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(NumberFormatException event)&#123;label.setText(<span class="string">&quot;请输入数字&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是主类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">WindowButton win =<span class="keyword">new</span> WindowButton(<span class="string">&quot;猜数字&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是程序运行时图<br><img src="https://img-blog.csdnimg.cn/20210402185830664.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>swing</tag>
        <tag>可执行程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Java容器类</title>
    <url>/2021/04/03/Java%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<p>在Java中有着一种专门存放对象或对象引用的类，叫做容器类，或者叫集合类<br>容器类并不是特指某个类。按照一定的存储方式对对象进行存储的类都叫容器类。<br>而按照存储方式的不同可将容器类分为两种<br>1：实现collection接口的类：定义独立元素的序列<br>2：实现Map接口的类：定义成对的键值（key-value），并且map不能有重复的key</p>
<h1 id="collection容器"><a href="#collection容器" class="headerlink" title="collection容器"></a>collection容器</h1><p>collection可以继续细分为三种子接口<br>1：list：该集合内元素为有序可重复//<em>如数组链表</em><br>2：set：该集合内元素为无序不可重复//注意！<em>set在存储元素时并非顺序存储，而且重复元素不会进行添加</em><br>3：queue：该集合内元素为先进先出//<em>队列</em></p>
<h2 id="list容器"><a href="#list容器" class="headerlink" title="list容器"></a>list容器</h2><p>list容器的三个重要容器类</p>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>动态数组类，内部数据结构由数组实现，该类实现了元素的快速随机访问，但是在删除或添加元素时需要移动大量的元素，因此不适合频繁的删除和增加</p>
<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>向量类，跟ArrayList基本一致，但有一点不同，Vector类的每一个方法都加了同步锁，好处是线程安全，坏处是访问速度要比ArrayList慢</p>
<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>链表类，内部数据结构是链表，该类实现了元素方便快速修改，但降低了访问速度，适合修改元素频繁的场景</p>
<h2 id="set容器"><a href="#set容器" class="headerlink" title="set容器"></a>set容器</h2><p>set容器有两个重要的实现类</p>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>该类封装了HashMap，在向HashSet中添加元素时，先判断容器内是否已经有该元素，没有该元素才添加，这个过程是线程不安全的，并且不保证顺序不变</p>
<h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>该类封装了TreeMap，在添加元素时会考虑顺序（这点与HashSet不同），并且同样不保证线程安全，不允许存在null</p>
<h2 id="queue容器"><a href="#queue容器" class="headerlink" title="queue容器"></a>queue容器</h2><p>queue容器实现了队列的存储结构，遵循先进先出的原则</p>
<h1 id="Map容器"><a href="#Map容器" class="headerlink" title="Map容器"></a>Map容器</h1><p>Map容器有两个重要的实现类</p>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>该类是由数组链表和红黑树实现的，数组中存放的是单链表的引用，也就是说数组的大小就是单链表的多少，当链表的长度大于8时，链表存储会改为红黑树存储。</p>
<blockquote>
<p>为什么要引入红黑树：在链表中查找元素时间复杂度为O(n)。而红黑树在查找时时间复杂度为O(logn)，在链表长度较少时没有影响，当链表长度过多时，引入红黑树存储能提高读取速度</p>
</blockquote>
<p>当元素想要添加进HashMap时，先调用hashCode()计算key值，根据key找到对应的链表，若链表中存在该值，则丢弃，若不存在，则添加进去</p>
<h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>与HashMap基本类似，不同点在于HashTable是线程安全的，但会造成性能损失</p>
<h1 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h1><p>Iterator是迭代器，它能在不知道容器内元素类型的情况下遍历所有元素，不属于Colletion和Map接口体系</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>什么是单例模式，单例模式的优点，饿汉和懒汉式单例模式的区别</title>
    <url>/2021/03/31/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BC%98%E7%82%B9%EF%BC%8C%E9%A5%BF%E6%B1%89%E5%92%8C%E6%87%92%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h1><p>单例模式是一种设计模式，是创建式模式的一种。它确保了一个类有且只有一个对象存在。<br>单例模式的定义：<br>1：定义私有的静态成员变量private static<br>2：私有化构造函数private<br>3：提供一个公有的的静态方法以便构造实例public static</p>
<h1 id="单例模式的优点和适用场景"><a href="#单例模式的优点和适用场景" class="headerlink" title="单例模式的优点和适用场景"></a>单例模式的优点和适用场景</h1><p>优点：<br>1：避免了频繁的创建和销毁对象，减少了系统开销<br>2：节省了内存空间，且内存中只有一个对象<br>3：提供了一个全局访问点<br>适用场景：<br>1：针对某些需要频繁创建和删除对象的情景<br>2：需要频繁的创建对象，但对象创建需要大量的开销<br>3：某些确实只能有一个对象的情景，如某些核心交易类，就只许有一个对象</p>
<h1 id="饿汉式和懒汉式单例模式区别"><a href="#饿汉式和懒汉式单例模式区别" class="headerlink" title="饿汉式和懒汉式单例模式区别"></a>饿汉式和懒汉式单例模式区别</h1><p>饿汉式：在单例类被加载时，就直接实例化一个对象<br>不关用不用的上，加载时就创建实例，浪费了空间，但是用的时候不需要判断是否需要创建实例，节约了判断的时间<br>属于空间换时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance=<span class="keyword">new</span> Singleton();</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>懒汉式：单例类被加载时，先不实例化一个对象，在公有的静态方法被调用时，才会实例化一个对象<br>JVM加载完之后并不会创建实例，节省了空间，但是在每次获取实例的时候都要进行一次判断，看是否需要创建实例，浪费了时间<br>属于时间换空间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance==<span class="keyword">null</span>)instance=<span class="keyword">new</span> SIngleton();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>而且由于懒汉式在加载类的时候并不创建实例，因此在真正创建实例时，有可能引发多线程并发问题，本来单例模式保证只有一个实例，由于多线程调用的问题，创建出多个实例来，导致单例模式失效。<br>因此，在公有静态方法上加了个synchronized(同步)关键字来保证线程安全，同一时间只有一个线程能访问该方法。<br>但紧接着问题又出现了，直接在方法上加锁确实简单，但也进一步加大了开销，拉低了整个实例的访问速度。</p>
<h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>方法：双重检查加锁<br>1：加volatile关键字，保证本地线程不会缓存该变量，变量的读写直接在共享内存中，这样使多线程读到的变量都是正确的<br>2：将synchronized(同步)关键字移入方法内部使用，当方法调用时，先检查是否需要创建实例，如果实例已经存在，直接返回实例，不需要使用同步关键字，如果实例不存在，则进入同步关键字判断，将判断实例是否存在的步骤再进行一遍。<br>在此过程中，检查了两次实例是否存在，还使用了同步关键字加锁，因此被叫做双重检查加锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span>  <span class="keyword">static</span> Singleton instance=<span class="keyword">null</span>;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance==<span class="keyword">null</span>)</span><br><span class="line">	<span class="keyword">synchronized</span>(Singleton.class)</span><br><span class="line">	<span class="keyword">if</span>(instance==<span class="keyword">null</span>)instance=<span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="keyword">return</span> instance;	</span><br><span class="line">	&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这样保证了线程的安全，而且只有第一次实现实例的时候会同步，减小了性能开销</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构与算法：Java单链表</title>
    <url>/2021/04/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%9AJava%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p> 首先我们要知道，在Java中是没有指针的概念的<br> 而Java虽然没有指针，但有着引用<br> 利用引用一样可以制造链表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">Node next=<span class="keyword">null</span>;<span class="comment">//节点被创建的同时创建对象引用，但没申请对象空间</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> n)</span>data</span>=n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每一个结点都有一个对象引用，这使得链表在逻辑上是连续的，不用考虑物理顺序<br>通常情况下，链表有一个head，用来标识链表的起始位置，head并不作为链表的结点，head只是一个引用，head的引用对象是链表的第一个结点。<br>如：head.data==第一个结点.data;<br>我们接下来创建链表类，链表由结点构成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span>&#123;</span><br><span class="line">    Node head=<span class="keyword">null</span>;<span class="comment">//每个链表都有头结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="comment">//给链表增加结点的方法，这里只示例尾部结点添加，其他插入也大同小异</span></span><br><span class="line">        Node n=<span class="keyword">new</span> Node(e);</span><br><span class="line">        Node tmp=head;<span class="comment">//head引用不能动，因为head标识链表的起始位置，申请一个tmp引用来进行操作</span></span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;head=n;<span class="keyword">return</span>;&#125;<span class="comment">//若链表为空，则直接添加在第一个结点</span></span><br><span class="line">        <span class="keyword">while</span>(tmp.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            tmp=tmp.next;<span class="comment">//将tmp引用向后移,一直移到最后一个结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        tmp.next=n;<span class="comment">//在最后一个结点后添加新结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNode</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//删除指定位置的结点，第一个结点是head指向的结点</span></span><br><span class="line">        Node pre=head;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;head=head.next;<span class="keyword">return</span>;&#125;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(num&lt;n)&#123;</span><br><span class="line">            pre=pre.next;<span class="comment">//pre指向被删除的前一个结点</span></span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next=pre.next.next;<span class="comment">//删除结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="comment">//输出链表</span></span><br><span class="line">        Node tmp=head;</span><br><span class="line">        <span class="keyword">if</span>(tmp==<span class="keyword">null</span>)&#123;System.out.print(<span class="string">&quot;null&quot;</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">        System.out.print(tmp.data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        tmp=tmp.next;&#125;<span class="keyword">while</span>(tmp.next!=<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>链表操作关键在于两处<br>1：head始终代表链表的起始位置<br>2：如果当前引用的结点为空，则空结点不能有下一个结点，否则会报错</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>操作系统进程</title>
    <url>/2021/03/31/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E8%BF%9B%E7%A8%8B%E5%92%8C%E4%B8%AD%E6%96%AD/</url>
    <content><![CDATA[<h1 id="进程是什么"><a href="#进程是什么" class="headerlink" title="进程是什么"></a>进程是什么</h1><p>进程是某个允许并发执行的程序在某个数据集合上的执行过程</p>
<h1 id="进程和程序的区别"><a href="#进程和程序的区别" class="headerlink" title="进程和程序的区别"></a>进程和程序的区别</h1><p>进程是动态的过程，存在比较短暂，程序是静态的，是永久存在的<br>一个进程可以对应许多个程序，一个程序也可以有多个进程</p>
<h1 id="进程控制块"><a href="#进程控制块" class="headerlink" title="进程控制块"></a>进程控制块</h1><p>进程控制块是进程实体的一部分，是记录性的数据结构<br>存在着进程标识符信息、处理机状态信息、进程调度信息和进程控制信息</p>
<h1 id="进程的三种基本状态"><a href="#进程的三种基本状态" class="headerlink" title="进程的三种基本状态"></a>进程的三种基本状态</h1><p>就绪态、运行态、阻塞态<br>就绪态的进程除了cpu的时间片之外，其他资源已经准备好了<br>运行态是指正在运行的进程<br>阻塞态是指正在等待事件发生的进程</p>
<h1 id="进程状态转换"><a href="#进程状态转换" class="headerlink" title="进程状态转换"></a>进程状态转换</h1><h2 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h2><p>申请空白的进程控制块<br>为新进程分配资源<br>初始化进程控制块<br>将进程插入就绪队列</p>
<h2 id="进程阻塞"><a href="#进程阻塞" class="headerlink" title="进程阻塞"></a>进程阻塞</h2><p>暂停进程的运行<br>将进程状态改为阻塞态<br>将进程插入阻塞队列<br>重新进行程序调度</p>
<h2 id="进程唤醒"><a href="#进程唤醒" class="headerlink" title="进程唤醒"></a>进程唤醒</h2><p>将进程从阻塞队列移出<br>将进程由阻塞态转为就绪态<br>将进程插入就绪队列</p>
<h1 id="中断是什么"><a href="#中断是什么" class="headerlink" title="中断是什么"></a>中断是什么</h1><p>中断是处理器停止按照已有顺序执行的事件</p>
<h1 id="为什么要有中断"><a href="#为什么要有中断" class="headerlink" title="为什么要有中断"></a>为什么要有中断</h1><p>中断的存在使得处理器能够与其他设备并行运行，解决了处理器等待设备的时间浪费问题，提高了处理器利用率，改善了性能</p>
<h1 id="中断类型"><a href="#中断类型" class="headerlink" title="中断类型"></a>中断类型</h1><h2 id="内部中断"><a href="#内部中断" class="headerlink" title="内部中断"></a>内部中断</h2><p>指的是程序运行时出现错误：如除数为0</p>
<h2 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h2><p>外部可屏蔽中断：如打印机<br>外部不可屏蔽中断：如硬件故障或断电</p>
<h1 id="什么时候响应中断（外部中断）"><a href="#什么时候响应中断（外部中断）" class="headerlink" title="什么时候响应中断（外部中断）"></a>什么时候响应中断（外部中断）</h1><p>程序处于开中断状态<br>且在每条指令执行结束之后进行检测</p>
<h1 id="中断处理过程！"><a href="#中断处理过程！" class="headerlink" title="中断处理过程！"></a>中断处理过程！</h1><p>中断检测：开中断状态下，每条指令执行结束后进行中断检测<br>中断响应和中断处理：若检测到中断信号，关中断，保存断点和现场，程序计数器PC换为中断服务程序的入口地址（由中断向量表保存，不同中断源对应不同中断向量，根据中断向量查找中断向量表），开中断，执行中断服务程序，关中断，恢复现场和断点，开中断，返回断点</p>
<h1 id="操作系统做了什么"><a href="#操作系统做了什么" class="headerlink" title="操作系统做了什么"></a>操作系统做了什么</h1><p>初始化中断描述符表<br>初始化中断描述符表寄存器<br>执行中断处理程序</p>
<h1 id="时钟的重要性"><a href="#时钟的重要性" class="headerlink" title="时钟的重要性"></a>时钟的重要性</h1><p>定时测量<br>防止进程垄断资源<br>与时钟有关的程序需要时钟支持</p>
<h1 id="操作系统内核完成的时钟功能"><a href="#操作系统内核完成的时钟功能" class="headerlink" title="操作系统内核完成的时钟功能"></a>操作系统内核完成的时钟功能</h1><p>保存当前的日期和时间<br>维持定时器</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
</search>
